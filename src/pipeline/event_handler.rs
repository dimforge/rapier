use crate::geometry::{CollisionEvent, ContactPair};
use crossbeam::channel::Sender;

bitflags::bitflags! {
    #[cfg_attr(feature = "serde-serialize", derive(Serialize, Deserialize))]
    /// Flags affecting the events generated for this collider.
    pub struct ActiveEvents: u32 {
        /// If set, Rapier will call `EventHandler::handle_intersection_event` and
        /// `EventHandler::handle_contact_event` whenever relevant for this collider.
        const COLLISION_EVENTS = 0b0001;
    }
}

impl Default for ActiveEvents {
    fn default() -> Self {
        ActiveEvents::empty()
    }
}

/// Trait implemented by structures responsible for handling events generated by the physics engine.
///
/// Implementors of this trait will typically collect these events for future processing.
pub trait EventHandler: Send + Sync {
    /// Handle a collision event.
    ///
    /// A intersection event is emitted when the state of intersection between two colliders changes.
    fn handle_intersection_event(&self, event: CollisionEvent);
    /// Handle a contact event.
    ///
    /// A contact event is emitted when two collider start or stop touching, independently from the
    /// number of contact points involved.
    fn handle_contact_event(&self, event: CollisionEvent, contact_pair: &ContactPair);
}

impl EventHandler for () {
    fn handle_intersection_event(&self, _event: CollisionEvent) {}
    fn handle_contact_event(&self, _event: CollisionEvent, _contact_pair: &ContactPair) {}
}

/// A collision event handler that collects events into a crossbeam channel.
pub struct ChannelEventCollector {
    event_sender: Sender<CollisionEvent>,
}

impl ChannelEventCollector {
    /// Initialize a new collision event handler from crossbeam channel senders.
    pub fn new(event_sender: Sender<CollisionEvent>) -> Self {
        Self { event_sender }
    }
}

impl EventHandler for ChannelEventCollector {
    fn handle_intersection_event(&self, event: CollisionEvent) {
        let _ = self.event_sender.send(event);
    }

    fn handle_contact_event(&self, event: CollisionEvent, _: &ContactPair) {
        let _ = self.event_sender.send(event);
    }
}
